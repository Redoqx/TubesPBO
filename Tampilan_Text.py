# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Tampilan_Text.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
import fpdf
import webbrowser


class Ui_Tampilan_Text(object):
    def setupUi(self, Tampilan_Text):
        Tampilan_Text.setObjectName("Tampilan_Text")
        Tampilan_Text.resize(1102, 600)
        self.frame = QtWidgets.QFrame(Tampilan_Text)
        self.frame.setGeometry(QtCore.QRect(0, 0, 1101, 601))
        self.frame.setStyleSheet("background-color: rgb(0, 255, 127);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.BackIcon = QtWidgets.QLabel(self.frame)
        self.BackIcon.setGeometry(QtCore.QRect(10, 10, 31, 31))
        self.BackIcon.setText("")
        self.BackIcon.setPixmap(QtGui.QPixmap("icon/BackIcon.png"))
        self.BackIcon.setScaledContents(True)
        self.BackIcon.setObjectName("BackIcon")
        self.BackButton = QtWidgets.QPushButton(self.frame)
        self.BackButton.setGeometry(QtCore.QRect(10, 10, 31, 31))
        font = QtGui.QFont()
        font.setKerning(False)
        self.BackButton.setFont(font)
        self.BackButton.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.BackButton.setMouseTracking(False)
        self.BackButton.setAutoFillBackground(False)
        self.BackButton.setStyleSheet("color: rgb(170, 255, 255);\n"
"background-color: transparent;\n"
"")
        self.BackButton.setText("")
        self.BackButton.setObjectName("BackButton")
        self.frame_2 = QtWidgets.QFrame(self.frame)
        self.frame_2.setGeometry(QtCore.QRect(10, 510, 1081, 41))
        self.frame_2.setStyleSheet("background-color: rgb(235, 255, 255);")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.FindDirectory = QtWidgets.QLineEdit(self.frame_2)
        self.FindDirectory.setGeometry(QtCore.QRect(150, 10, 871, 21))
        self.FindDirectory.setStyleSheet("background:transparent;\n"
"color: rgb(0, 0, 0);\n"
"border:none;\n"
"border-bottom:1px solid;")
        self.FindDirectory.setObjectName("FindDirectory")
        self.label = QtWidgets.QLabel(self.frame_2)
        self.label.setGeometry(QtCore.QRect(10, 10, 141, 20))
        self.label.setObjectName("label")
        self.DirectoryFinderButton = QtWidgets.QToolButton(self.frame_2)
        self.DirectoryFinderButton.setGeometry(QtCore.QRect(1040, 10, 30, 25))
        self.DirectoryFinderButton.setObjectName("DirectoryFinderButton")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.frame)
        self.plainTextEdit.setGeometry(QtCore.QRect(10, 50, 1081, 451))
        self.plainTextEdit.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.CetakPDF = QtWidgets.QPushButton(self.frame)
        self.CetakPDF.setGeometry(QtCore.QRect(360, 560, 381, 28))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.CetakPDF.sizePolicy().hasHeightForWidth())
        self.CetakPDF.setSizePolicy(sizePolicy)
        self.CetakPDF.setStyleSheet("background-color: rgb(170, 255, 127);\n"
"gridline-color: rgb(0, 0, 0);\n"
"selection-color: rgb(255, 255, 255);\n"
"selection-background-color: rgb(255, 255, 255);")
        self.CetakPDF.setAutoDefault(False)
        self.CetakPDF.setDefault(False)
        self.CetakPDF.setFlat(False)
        self.CetakPDF.setObjectName("CetakPDF")

        self.retranslateUi(Tampilan_Text)
        QtCore.QMetaObject.connectSlotsByName(Tampilan_Text)

        #code here
        #Cetak
        self.CetakPDF.pressed.connect(lambda: self.cetak())
        #Nyariin
        self.DirectoryFinderButton.pressed.connect(self.CariinDung)

    def retranslateUi(self, Tampilan_Text):
        _translate = QtCore.QCoreApplication.translate
        Tampilan_Text.setWindowTitle(_translate("Tampilan_Text", "Tampilan_Text"))
        self.FindDirectory.setPlaceholderText(_translate("Tampilan_Text", "File Directory"))
        self.label.setText(_translate("Tampilan_Text", "Cetak Sebagai PDF di :"))
        self.DirectoryFinderButton.setText(_translate("Tampilan_Text", "..."))
        self.plainTextEdit.setPlainText(_translate("Tampilan_Text", "jh\n"
"knv"))
        self.CetakPDF.setText(_translate("Tampilan_Text", "Cetak pdf"))

    def Tampilin(self,Text):
        self.plainTextEdit.setPlainText(Text)
        self.Text = Text

    def CariinDung(self):
        # filename = QtWidgets.QFileDialog.getOpenFileName()
        folderpath = QtWidgets.QFileDialog.getExistingDirectory()
        self.path = folderpath+'\ Daftar_Inventaris.pdf'
        self.FindDirectory.setText(self.path)

    def cetak(self):
        pdf = fpdf.FPDF('L','mm','A4')
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        Gedung = "E"
        pdf.write(5,self.Text)
        pdf.ln()
        pdf.output(self.path)
        path = r'file://'+self.path
        webbrowser.open_new(path)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Tampilan_Text = QtWidgets.QDialog()
    ui = Ui_Tampilan_Text()
    ui.setupUi(Tampilan_Text)
    ui.Tampilin("Hai\nHo")
    Tampilan_Text.show()
    sys.exit(app.exec_())
